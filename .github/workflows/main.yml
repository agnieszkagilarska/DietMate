name: Build and Push Docker Images

on:
  push:
    branches:
      - main

jobs:
  build:
    environment: DOCKER # DietMate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install certbot and openssl
        run: |
          sudo apt update
          sudo apt install -y certbot openssl

      - name: Ensure manual hooks are executable
        run: |
          chmod +x azure/hooks/manual-auth-hook.sh
          chmod +x azure/hooks/manual-cleanup-hook.sh

      - name: Run cleanup hook
        run: |
          sudo bash azure/hooks/manual-cleanup-hook.sh
          sleep 10

      - name: Run Certbot without email
        run: |
          sudo certbot --manual --preferred-challenges dns certonly \
          -d ${{ secrets.DOMAIN }} \
          --manual-auth-hook azure/hooks/manual-auth-hook.sh \
          --agree-tos \
          --register-unsafely-without-email \
          --non-interactive

      - name: Base64 encode SSL certificates
        run: |
          sudo base64 -i /etc/letsencrypt/live/${{ secrets.DOMAIN }}/fullchain.pem > fullchain.pem.base64
          sudo base64 -i /etc/letsencrypt/live/${{ secrets.DOMAIN }}/privkey.pem > privkey.pem.base64

      - name: Generate PFX certificate and base64 encode it
        run: |
          sudo openssl pkcs12 -export -out certificate.pfx \
          -inkey /etc/letsencrypt/live/${{ secrets.DOMAIN }}/privkey.pem \
          -in /etc/letsencrypt/live/${{ secrets.DOMAIN }}/fullchain.pem \
          -passout pass:${{ secrets.PFX_PASS }}
          sudo base64 -i certificate.pfx > .github/certificate.pfx.base64

      - name: Commit and push the base64 encoded certificate
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .github/certificate.pfx.base64
          git commit -m "[skip ci] Update base64 encoded certificate"
          git push origin HEAD:main

      - name: Log in to Docker Hub (backend)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.BACKEND_DOCKER_USER }}
          password: ${{ secrets.BACKEND_DOCKER_PASS }}

      - name: Build backend image
        run: |
          docker buildx build \
            --build-arg REACT_APP_DOMAIN=https://${{ secrets.DOMAIN }} \
            --build-arg SSL_CERT_BASE64=$(tr -d '\n' < fullchain.pem.base64) \
            --build-arg SSL_KEY_BASE64=$(tr -d '\n' < privkey.pem.base64) \
            --build-arg MONGO_CONNECTION_STRING=${{ secrets.MONGO_CONNECTION_STRING }} \
            --build-arg GROQ_API_KEY=${{ secrets.GROQ_API_KEY }} \
            --build-arg GROQ_GPT_MODEL=${{ secrets.GROQ_GPT_MODEL }} \
            -t ${{ secrets.BACKEND_DOCKER_USER }}/dietmate-backend:latest \
            --platform linux/amd64 \
            --push \
            -f backend/Dockerfile \
            ./backend

      - name: Log in to Docker Hub (frontend)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.FRONTEND_DOCKER_USER }}
          password: ${{ secrets.FRONTEND_DOCKER_PASS }}

      - name: Build frontend image
        run: |
            docker buildx build \
                  --build-arg REACT_APP_DOMAIN=https://${{ secrets.DOMAIN }} \
                  --build-arg SSL_CERT_BASE64=$(tr -d '\n' < fullchain.pem.base64) \
                  --build-arg SSL_KEY_BASE64=$(tr -d '\n' < privkey.pem.base64) \
                  -t ${{ secrets.FRONTEND_DOCKER_USER }}/dietmate-frontend:latest \
                  --platform linux/amd64 \
                  --push \
                  -f frontend/Dockerfile \
                  ./frontend