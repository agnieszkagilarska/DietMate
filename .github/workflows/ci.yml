name: Build and Push Docker Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install certbot and openssl
        run: |
          sudo apt update
          sudo apt install -y certbot openssl

      - name: Set environment variables for DuckDNS
        run: |
          echo "TOKEN_DUCKDNS=${{ secrets.TOKEN_DUCKDNS }}" >> $GITHUB_ENV
          echo "DOMAIN=${{ secrets.DOMAIN }}" >> $GITHUB_ENV

      - name: Obtain SSL certificates using certbot
        run: |
          sudo certbot --manual --preferred-challenges dns certonly -d $DOMAIN --manual-auth-hook azure/hooks/manual-auth-hook.sh

      - name: Base64 encode SSL certificates
        run: |
          sudo base64 -i /etc/letsencrypt/live/$DOMAIN/fullchain.pem > fullchain.pem.base64
          sudo base64 -i /etc/letsencrypt/live/$DOMAIN/privkey.pem > privkey.pem.base64

      - name: Generate PFX certificate and base64 encode it
        run: |
          sudo openssl pkcs12 -export -out certificate.pfx \
          -inkey /etc/letsencrypt/live/$DOMAIN/privkey.pem \
          -in /etc/letsencrypt/live/$DOMAIN/fullchain.pem \
          -passout pass:${{ secrets.PFX_PASS }}
          sudo base64 -i certificate.pfx > certificate.pfx.base64

      - name: Set environment variables for certs (base64 encoded)
        run: |
          echo "FULLCHAIN=$(cat fullchain.pem.base64)" >> $GITHUB_ENV
          echo "PRIVKEY=$(cat privkey.pem.base64)" >> $GITHUB_ENV
          echo "PFXCERT=$(cat certificate.pfx.base64)" >> $GITHUB_ENV

      - name: Save PFXCERT to file
        run: |
          echo "${{ secrets.PFXCERT }}" | base64 > .github/certificate.pfx.base64
          
      - name: Commit and push the base64 encoded certificate
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .github/certificate.pfx.base64
          git commit -m "[skip ci] Update base64 encoded certificate"
          git push origin HEAD:main

      - name: Log in to Docker Hub (backend)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.BACKEND_DOCKER_USER }}
          password: ${{ secrets.BACKEND_DOCKER_PASS }}

      - name: Build backend image
        run: |
            docker build \
                  --build-arg REACT_APP_DOMAIN=https://${{ secrets.DOMAIN }} \
                  --build-arg FULLCHAIN=${{ env.FULLCHAIN }} \
                  --build-arg PRIVKEY=${{ env.PRIVKEY }} \
                  --build-arg PFXCERT=${{ env.PFXCERT }} \
                  --build-arg MONGO_CONNECTION_STRING=${{ secrets.MONGO_CONNECTION_STRING }} \
                  --build-arg GROQ_API_KEY=${{ secrets.GROQ_API_KEY }} \
                  --build-arg GROQ_GPT_MODEL=${{ secrets.GROQ_GPT_MODEL }} \
                  -t dietmate-backend:latest \
                  -f backend/Dockerfile backend/
            docker push dietmate-backend:latest

      - name: Log in to Docker Hub (frontend)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.FRONTEND_DOCKER_USER }}
          password: ${{ secrets.FRONTEND_DOCKER_PASS }}

      - name: Build frontend image
        run: |
          docker build \
                --build-arg REACT_APP_DOMAIN=https://${{ secrets.DOMAIN }} \
                --build-arg SSL_KEY_BASE64=${{ env.PRIVKEY }} \
                --build-arg SSL_CERT_BASE64=${{ env.FULLCHAIN }} \
                -t dietmate-frontend:latest \
                -f frontend/Dockerfile frontend/

      - name: Push frontend image
        run: |
          docker push dietmate-frontend:latest